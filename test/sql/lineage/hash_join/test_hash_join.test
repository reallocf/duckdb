# name: test/sql/lineage/hash_join/test_hash_join.test
# description: Test Hash Joins
# group: [hash_join]


statement ok
PRAGMA trace_lineage = "OFF";

statement ok
CREATE TABLE t1(i INTEGER, j INTEGER);

statement ok
INSERT INTO t1 VALUES (3, 1),  (NULL, 2), (2, 3), (3, 4)
#(1, 5), (2, 6), (1, 7), (1, 8), (NULL, 9), (1, 10), (NULL, 11), (2, 12)
#INSERT INTO t1 VALUES ('A', 2),  ('B', 2), ('A', 4), ('C', 1), ('B', 1), ('C', 3)

statement ok
CREATE TABLE t2(i INTEGER, k VARCHAR(10));
#CREATE TABLE t2(i VARCHAR(10), k INTEGER);

statement ok
INSERT INTO t2 VALUES (3, 'A'),   (2, 'B'), (3, 'C'), (1, 'D')
#, (0, 'K'),(0, 'K'),(0, 'K'),(0, 'K'),(0, 'K'),(0, 'K'),(0, 'K'),(0, 'K'),(0, 'K'),(0, 'K'),(0, 'K'),(0, 'K'),(0, 'K'),(0, 'K')
#INSERT INTO t2 VALUES ('A', 9),   ('A', 0), ('B', 9), ('C', 9)


statement ok
PRAGMA trace_lineage = "ON";

# standalone limit
query II
select t1.j, t2.k from t1 inner join t2 on (t1.i = t2.i)
----
1	C
3	B
4	C
1	A
4	A


statement ok
PRAGMA trace_lineage = "OFF";

query II
SELECT * FROM queries_list;
----
13	select t1.j, t2.k from t1 inner join t2 on (t1.i = t2.i)
15	PRAGMA trace_lineage = "OFF";

query IIII
select rowid, chunk_id, index as output, value as input from HASH_JOIN_13_0_LHS;
----
0	0	0	0
1	0	1	2
2	0	2	3
3	0	3	0
4	0	4	3



query IIII
select r.rowid, r.chunk_id, r.index as output, s.index as input  from HASH_JOIN_13_0_SINK as s, HASH_JOIN_13_0_RHS as r where s.value=r.value ;
----
0	0	0	2
1	0	1	1
2	0	2	2
3	0	3	0
4	0	4	0